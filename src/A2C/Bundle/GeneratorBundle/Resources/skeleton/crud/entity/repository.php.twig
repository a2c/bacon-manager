<?php

namespace {{ namespace }}\Entity\Repository;

{% block use_statements %}
use Doctrine\ORM\EntityRepository;
use {{ namespace }}\Entity\{{ entity }};
{% endblock use_statements %}

{% block class_definition %}
class {{ entity }}Repository extends EntityRepository
{% endblock class_definition %}
{
    public function getQueryPagination({{ entity }} $entity,$sort,$direction)
    {
        {%- set alias = entity|lower|first %}

        $queryBuilder = $this->createQueryBuilder('{{ alias }}');

        $data = array(
        {%- for field in fields %}

            '{{ field.columnName }}' => $entity->get{{ field.fieldName|first|upper }}{{ field.fieldName|slice(1) }}(),
        {%- endfor %}

        );

        {%- for field in fields %}


            if (!empty($data['{{ field.columnName }}'])) {
            {% if field.type == 'date' -%}

                $queryBuilder
                    ->andWhere($queryBuilder->expr()->gte('{{ alias }}.{{ field.columnName }}', ':{{ field.columnName }}'))
                    ->setParameter('{{ field.columnName }}', $data['{{ field.columnName }}'])
                ;
            {%- elseif field.type == 'string' -%}

                {%- if field.length <= 2 -%}

                    $queryBuilder
                        ->andWhere($queryBuilder->expr()->eq('{{ alias }}.{{ field.columnName }}', ':{{ field.columnName }}'))
                        ->setParameter('{{ field.columnName }}', $data['{{ field.columnName }}'])
                    ;

                {%- else -%}

                    $queryBuilder
                        ->andWhere($queryBuilder->expr()->like('{{ alias }}.{{ field.columnName }}', ':{{ field.columnName }}'))
                        ->setParameter('{{ field.columnName }}', "%{$data['{{ field.columnName }}']}%")
                    ;

                {%- endif %}
            {% else -%}

                $queryBuilder
                    ->andWhere($queryBuilder->expr()->eq('{{ alias }}.{{ field.columnName }}', ':{{ field.columnName }}'))
                    ->setParameter('{{ field.columnName }}', $data['{{ field.columnName }}'])
                ;

            {%- endif %}

            }
        {%- endfor %}

        $queryBuilder->orderBy('{{ alias }}.' . $sort,$direction);

        return $queryBuilder->getQuery();
    }
}